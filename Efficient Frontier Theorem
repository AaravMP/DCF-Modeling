import pandas as pd  
import pandas_datareader as pdr 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import quandl
import scipy.optimize as sco
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import yfinance as yf
import pandas_datareader.data as web
from pandas_datareader import data as pdr
import datetime as dt
import requests
from bs4 import BeautifulSoup
import re
from datetime import datetime
from time import mktime
from matplotlib import style
style.use('ggplot')
from scipy.stats import norm
%matplotlib inline
import statistics
import datashader
import quandl
import scipy.optimize as sco
from scipy.optimize import LinearConstraint
from scipy.optimize import NonlinearConstraint

plt.style.use('fivethirtyeight')
np.random.seed(777)

%matplotlib inline
%config InlineBackend.figure_format = 'retina'

stocks = ['NVDA','GOOG','APPL','MSFT']
len(stocks)

data = pd.DataFrame()
data = yf.download(stocks, start= datetime(2008,1,1))['Adj Close']

data.head()
data.info()
df = data
df.head()
table = data

#Plot returns over each other
plt.figure(figsize=(10, 7))
for c in table.columns.values:
    plt.plot(table.index, table[c], lw=3, alpha=0.8,label=c)
plt.legend(loc='upper left', fontsize=12)
plt.ylabel('price in $')

#Plot returns in essence
returns = table.pct_change()
plt.figure(figsize=(14, 7))
for c in returns.columns.values:
    plt.plot(returns.index, returns[c], lw=3, alpha=0.8,label=c)
plt.legend(loc='upper right', fontsize=12)
plt.ylabel('daily returns')

def portfolio_annualised_performance(weights, mean_returns, cov_matrix):
    returns = np.sum(mean_returns*weights ) *252
    std = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights))) * np.sqrt(252)
    return std, returns

def random_portfolios(num_portfolios, mean_returns, cov_matrix, risk_free_rate):
    results = np.zeros((3,num_portfolios))
    weights_record = []
    for i in range(num_portfolios):
        weights = np.random.random(len(mean_returns))
        weights /= np.sum(weights)
        weights_record.append(weights)
        portfolio_std_dev, portfolio_return = portfolio_annualised_performance(weights, mean_returns, cov_matrix)
        results[0,i] = portfolio_std_dev
        results[1,i] = portfolio_return
        results[2,i] = (portfolio_return - risk_free_rate) / portfolio_std_dev
    return results, weights_record
    
returns = table.pct_change()

mean_returns = returns.mean()
cov_matrix = returns.cov()
num_portfolios = 500000 #no of simulations
risk_free_rate = 0.0383

results, weights = random_portfolios(num_portfolios, mean_returns, cov_matrix, risk_free_rate)

# Find the maximum Sharpe ratio portfolio
max_sharpe_idx = np.argmax(results[2])
sdp, rp = results[0, max_sharpe_idx], results[1, max_sharpe_idx]
max_sharpe_allocation = pd.DataFrame(weights[max_sharpe_idx], index=df.columns, columns=['allocation'])
max_sharpe_allocation.allocation = [round(i*100, 2) for i in max_sharpe_allocation.allocation]
max_sharpe_allocation /= max_sharpe_allocation.sum()

# Find the minimum volatility portfolio
min_vol_idx = np.argmin(results[0])
sdp_min, rp_min = results[0, min_vol_idx], results[1, min_vol_idx]
min_vol_allocation = pd.DataFrame(weights[min_vol_idx], index=df.columns, columns=['allocation'])
min_vol_allocation.allocation = [round(i*100, 2) for i in min_vol_allocation.allocation]
min_vol_allocation /= min_vol_allocation.sum()

# Display the results
print("-"*80)
print("Maximum Sharpe Ratio Portfolio Allocation\n")
print("Annualised Return:", round(rp, 2))
print("Annualised Volatility:", round(sdp, 2))
print("\n")
print(max_sharpe_allocation)
print("-"*80)
print("Minimum Volatility Portfolio Allocation\n")
print("Annualised Return:", round(rp_min, 2))
print("Annualised Volatility:", round(sdp_min, 2))
print("\n")
print(min_vol_allocation)

plt.figure(figsize=(15, 7))
plt.scatter(results[0,:], results[1,:], c=results[2,:], cmap='YlGnBu', marker='o', s=10, alpha=0.3)
plt.colorbar()
plt.scatter(sdp, rp, marker='', color='r', s=500, label='Maximum Sharpe ratio')
plt.scatter(sdp_min, rp_min, marker='', color='g', s=500, label='Minimum volatility')
plt.title('Simulated Portfolio Optimization based on Efficient Frontier')
plt.xlabel('Annualised volatility')
plt.ylabel('Annualised returns')
plt.legend(labelspacing=0.8)
plt.show()
