#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jan 11 21:12:58 2023

@author: aarav
"""

import pandas as pd
import numpy as np
from pandas_datareader import data as web
from datetime import datetime
import pandas as pd  
import pandas_datareader as pdr 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import quandl
import scipy.optimize as sco
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import yfinance as yf
import pandas_datareader.data as web
from pandas_datareader import data as pdr
import requests
from bs4 import BeautifulSoup
import re
from datetime import datetime
from time import mktime
from matplotlib import style
style.use('ggplot')
from scipy.stats import norm
%matplotlib inline
import statistics
import datashader
import quandl
import scipy.optimize as sco
from scipy.optimize import LinearConstraint
from scipy.optimize import NonlinearConstraint


def portfolio_returns_volatility(stocks, weights):
    start = datetime(2019, 1, 1)
    end = datetime.now()

    # Downloading historical data for the stocks
    stock_data = pd.DataFrame()
    stock_data = yf.download(stocks, start= datetime(2019,1,1))['Adj Close']

    # Calculating the daily returns of the stocks
    stock_returns = stock_data.pct_change()

    # Creating the covariance matrix
    cov_matrix = stock_returns.cov()

    # Calculating the portfolio returns
    portfolio_returns = np.sum(stock_returns.mean() * weights) * 252

    # Calculating the portfolio volatility
    portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights))) * np.sqrt(252)

    return portfolio_returns, portfolio_volatility

stocks = ['ANGELONE.NS','BAJAJFINSV.NS','CANOPYFIN.BO','ISEC.NS','KARNAVATI.BO','NAYSAA.BO','SKPSEC.BO','VCKCAP.BO','CIPLA.NS','GODAVARI.BO','GUJTHEM.BO','JBCHEPHARM.NS','LUPIN.NS','SAKAR.NS','VAISHALI.NS','AVANTEL.BO','COFORGE.NS','DSSL.NS','HCLTECH.BO','INFY.NS','LTI.BO','OFSS.NS','SAKSOFT.NS','TCS.NS','TECHM.NS','NXTDIGITAL.NS','PFOCUS.BO','PVR.NS','SUNTV.NS','TIPSINDLTD.NS','TV18BRDCST.NS','WONDERLA.NS','ZEEL.NS']
weights = [0.0616,0.0840,0.0284,0.0520,0.0367,0.0224,0.0283,0.0166,0.0418,0.0063,0.0287,0.0077,0.0573,0.0405,0.0322,0.0368,0.0157,0.0165,0.0675,0.0419,0.0608,0.0244,0.0017,0.0798,0.0080,0.0059,0.0003,0.0273,0.0056,0.0480,0.0009,0.0113,0.0037] #Efficient weights
weights = np.array(weights)

portfolio_returns, portfolio_volatility = portfolio_returns_volatility(stocks, weights)

print("Expected annualized returns: ", portfolio_returns*100, "%")
print("Volatility: ", portfolio_volatility*100, "%")
